#!/usr/bin/env bash

#
# Script d'installation de paquets & configuration server Apache2
#

# D√©claration du fichier de log
LOGFILE="/var/log/install-server.log"
log_action() {
    local MESSAGE="$1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $MESSAGE" | tee -a "$LOGFILE"
    logger "$MESSAGE"
}
# Capture toute la sortie du script (optionnel)
exec > >(tee -a "$LOGFILE") 2>&1

# V√©rifier si le script est ex√©cut√© avec les privil√®ges root
# if [ "$(id -u)" -ne 0 ]; then
# 	log_action "‚ùå Ce script doit √™tre ex√©cut√© avec les privil√®ges root."
# 	echo "‚ùå Ce script doit √™tre ex√©cut√© avec les privil√®ges root."
#     exit 1
# fi

# Quitte le programme si une commande √©choue
set -o errexit
# Quitte le programme si variable non definie
set -o nounset
# Quitte le programme si une commande √©choue dans un pipe
set -o pipefail

clear
cat << "EOF"
Renaud G.
Version : 1.0

			           _nnnn_
			          dGGGGMMb     ,""""""""""""""""""".
			         @p~qp~~qMb    | Linuxüêß Serverüåê |
			         M|@||@) M|   _;...................'
			         @,----.JM| -'
			        JS^\__/  qKL
			       dZP        qKRb
			      dZP      üì¶  qKKb
			     fZP       üì•   SMMb
			     HZM            MMMM
			     FqM            MMMM
			   __| ".        |\dS"qML
			   |    `.       | `' \Zq
			  _)      \.___.,|     .'
			  \____   )MMMMMM|   .'
			       `-'       `--'

Installation de serveur LAMP    (/var/log/install-server.log)
/!\‚ö†Ô∏èBien penser √† REBOOT apr√®s l'execution de ce script‚ö†Ô∏è/!\

EOF

# Ajouter un nouvel utilisateur
read -p "Entre ton nouvel utilisateur : " USERNAME

user_install() {
    sudo adduser "$USERNAME"
    # Ajouter l'utilisateur aux sudoers directement
    echo "$USERNAME ALL=(ALL) ALL" | sudo tee -a /etc/sudoers.d/"$USERNAME"
    # Passer sur la session du nouvel utilisateur
    sudo su - "$USERNAME" -c "bash"
    # Supprimer l'utilisateur 'pi'
    sudo userdel -r pi
	log_action "user pi supprim√© ‚úÖÔ∏è\n"
	echo "user pi supprim√© ‚úÖÔ∏è\n"
}

usb_install() {
	# Monter la cl√© USB
	sudo mount /dev/sda1 /media/"$USERNAME"
	# R√©cup√©rer le nom de la cl√© USB mont√©e
	USB_NAME=$(ls /media/"$USERNAME" | head -n 1)

	if [ -n "$USB_NAME" ]; then
	    log_action "Nom de la cl√© USB d√©tect√©e : $USB_NAME"
	else
	    log_action "‚ùå Aucune cl√© USB d√©tect√©e."
	    exit 1
	fi
	# V√©rifier si l'archive existe
	BACKUP_ARCHIVE="/media/"$USERNAME"/$USB_NAME/backup.tar.gz"
	if [ ! -f "$BACKUP_ARCHIVE" ]; then
	    log_action "‚ùå L'archive $BACKUP_ARCHIVE est introuvable !"
	    exit 1
	fi
	log_action "R√©cup√©ration et extraction de l'archive USB"
	echo "R√©cup√©ration et extraction de l'archive USB"
	# R√©pertoires archiv√©s en ne mettant PAS le / devant.
	tar -xvzf "$BACKUP_ARCHIVE" -C / \
	    "home/"$USERNAME"/Documents" \
	    "etc/default/keyboard" \
	    "etc/ssh/sshd_config" \
	    "var/www/html" \
	    "etc/init.d/firewall" \
	    "etc/hosts" \
	    "etc/hostname" \
	    "etc/apache2/apache2.conf" \
	    "etc/apache2/sites-available" \
	    "etc/pam.d/sshd" \
	    "etc/ssmtp" \
	    "etc/fail2ban" \
	    "etc/portsentry/portsentry.conf" \
	    "etc/default/portsentry" \
	    "etc/rkhunter.conf" \
	    "etc/modsecurity/modsecurity.conf" \
	    "etc/apache2/conf.d/security" \
	    "etc/apache2/conf-available/security.conf" \
	    "etc/cron.daily/00logwatch" \
	    "etc/logwatch/conf/logwatch.conf" \
	    "etc/default/automysqlbackup" \
	    "etc/motd" \
	    "etc/clamav/clamd.conf" \
	    "etc/clamav/freshclam.conf" \
	    "home/"$USERNAME"/scriptBackup" \
	    "home/"$USERNAME"/exeBackup.sh" \
	    "home/"$USERNAME"/.bashrc" \
	    "home/"$USERNAME"/.bash_history"
	log_action "Les repertoires /etc sont install√©s ‚úÖÔ∏è\n"
	echo "Les repertoires /etc sont install√©s ‚úÖÔ∏è\n"

	# Appliquer les modifications pour le keyboard
	sudo setupcon
	sudo systemctl restart ssh
	log_action "modifications pour le keyboard install√©s ‚úÖÔ∏è\n"
	echo "modifications pour le keyboard install√©s ‚úÖÔ∏è\n"
}

iptable_install() {
	# Donner les bonnes permissions au fichier
	sudo chmod +x /etc/init.d/firewall
	# Ajouter le script au d√©marrage du syst√®me
	sudo update-rc.d firewall defaults
	log_action "Iptable Install√© ‚úÖÔ∏è\n"
	echo "Iptable Install√© ‚úÖÔ∏è\n"
}

apt_install() {
	sudo wget -qO /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg
	echo "deb https://packages.sury.org/php/ $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/php.list
	sudo apt update && sudo apt upgrade
	log_action "Les paquets APT sont √† jour ‚úÖÔ∏è\n"
	echo "Les paquets APT sont √† jour ‚úÖÔ∏è\n"

	packages_apt="apache2 \
		          libapache2-mod-security2 \
		          libapache2-mod-evasive \
		          ntp \
		          ntpdate \
		          modsecurity-crs \
		          libpam-tmpdir \
		          lynis \
		          rkhunter \
		          portsentry \
		          fail2ban \
		          ssmtp \
		          mariadb-server \
		          wondershaper \
		          clamav \
		          clamav-daemon \
		          autoconf \
		          libtool \
		          automake \
		          automysqlbackup \
		          ccze \
		          php8.4 \
		          php8.4-cli
		          php8.4-fpm \
		          php8.4-opcache \
		          php8.4-curl \
		          php8.4-mbstring \
		          php8.4-zip \
		          php8.4-xml \
		          php8.4-gd \
		          php8.4-bcmath \
		          php8.4-apcu \
		          php8.4-redis \
		          php8.4-mysql \
		          php8.4-mcrypt \
		          php8.4-imagick \
		          php8.4-intl \
		          php8.4-json \
		          libapache2-mod-php8.4 \
		          libapache2-mod-fcgid \
		          apt-transport-https \
		          ca-certificates \
		          bmon \
		          htop \
		          logwatch \
		          ntpdate \
		          redis-server \
		          git \
		          build-essential \
		          python3-pip \
		          clamav \
		          clamav-daemon \
		          expect \
		          phpmyadmin \
		          wget \
		          curl \
		          unzip \
		          ufw \
		          mailx \
		          debootstrap"

	# Installation des paquets APT
	sudo apt install $packages_apt -y
	if [ $? -ne 0 ]; then
		log_action "Erreur lors de l'installation des paquets APT"
	    echo "Erreur lors de l'installation des paquets APT"
	    exit 1
	fi
	log_action "Les paquets APT sont install√©s ‚úÖÔ∏è\n"
	echo "Les paquets APT sont install√©s ‚úÖÔ∏è\n"
}

wiringpi_install() {
	# Ajout de lib pour TM1637
	pip install wiringpi
	log_action "wiringpi Install√© ‚úÖÔ∏è\n"
	echo "wiringpi Install√© ‚úÖÔ∏è\n"
}

a2_install() {
	# Demarrage des services Apache2 et MariaDb au d√©marrage
	sudo systemctl start apache2 && sudo systemctl enable apache2
	sudo systemctl start mariadb && sudo systemctl enable mariadb
	log_action "Les services Apache et MariaDb sont demarrer et activ√©s ‚úÖÔ∏è\n"
	echo "Les services Apache et MariaDb sont demarrer et activ√©s ‚úÖÔ∏è\n"
}

wondershaper_install() {
	sudo systemctl start wondershaper && sudo systemctl enable wondershaper
	log_action "Le service Wondershaper est demarr√© et activ√© ‚úÖÔ∏è\n"
	echo "Le service Wondershaper est demarr√© et activ√© ‚úÖÔ∏è\n"
}

mysql_install() {
    # Installation s√©curis√©e de MariaDB avec expect
    echo "S√©curisation de MariaDB..."
    read -s -p "Entrez le mot de passe root pour MariaDB : " root_password
    echo
    read -p "Entrez le nom du nouvel utilisateur : " new_user
    read -s -p "Entrez le mot de passe pour le nouvel utilisateur : " new_user_password
    echo
    read -p "Entrez le nom de la base de donn√©es : " database_name
    # Script expect pour automatiser mysql_secure_installation
    expect <<EOF
spawn sudo mysql_secure_installation
expect "Enter current password for root (enter for none):"
send "\n"
expect "Set root password?"
send "Y\n"
expect "New password:"
send "$root_password\n"
expect "Re-enter new password:"
send "$root_password\n"
expect "Remove anonymous users?"
send "Y\n"
expect "Disallow root login remotely?"
send "Y\n"
expect "Remove test database and access to it?"
send "Y\n"
expect "Reload privilege tables now?"
send "Y\n"
expect eof
EOF
    log_action "Cr√©ation de la base de donn√©es et de l'utilisateur..."
    echo "Cr√©ation de la base de donn√©es et de l'utilisateur..."
    sudo mysql -u root -p"$root_password" <<MYSQL_SCRIPT
CREATE DATABASE IF NOT EXISTS \`$database_name\`;
CREATE USER IF NOT EXISTS '$new_user'@'localhost' IDENTIFIED BY '$new_user_password';
GRANT ALL PRIVILEGES ON \`$database_name\`.* TO '$new_user'@'localhost';
FLUSH PRIVILEGES;
MYSQL_SCRIPT

    sudo systemctl restart mariadb
    log_action "MySQL Install√© et s√©curis√© ‚úÖÔ∏è\n"
    echo "MySQL Install√© et s√©curis√© ‚úÖÔ∏è\n"
}

phpmyadmin_install() {
	sudo apt install phpmyadmin
	sudo ln -s /usr/share/phpmyadmin /var/www/html/renaud/phpmyadmin
	# R√©pertoires archiv√©s en ne mettant PAS le / devant.
	tar -xvzf "$BACKUP_ARCHIVE" -C / "etc/phpmyadmin/.htpasswd"
	log_action "PhpMyAdmin Install√© ‚úÖÔ∏è\n"
	echo "PhpMyAdmin Install√© ‚úÖÔ∏è\n"
}

modsecurity_install() {
	echo -e "\n<IfModule security2_module>" | sudo tee -a /etc/apache2/apache2.conf
	echo "    IncludeOptional /etc/modsecurity/*.conf" | sudo tee -a /etc/apache2/apache2.conf
	echo "    IncludeOptional /etc/modsecurity/rules/*.conf" | sudo tee -a /etc/apache2/apache2.conf
	echo "</IfModule>" | sudo tee -a /etc/apache2/apache2.conf
	log_action "Modsecurity Install√© ‚úÖÔ∏è\n"
	echo "Modsecurity Install√© ‚úÖÔ∏è\n"
}

modsecurity_crs_install() {
	sudo a2enconf security
	sudo ln -s /usr/share/modsecurity-crs/crs-setup.conf /etc/modsecurity/crs-setup.conf
	sudo ln -s /usr/share/modsecurity-crs/rules/*.conf /etc/modsecurity/rules/
	log_action "Modsecurity crs Install√© ‚úÖÔ∏è\n"
	echo "Modsecurity crs Install√© ‚úÖÔ∏è\n"
}

fpm_php_install() {
	PHP_INI_FILE="/etc/php/8.4/fpm/php.ini"
	# Fonction pour remplacer ou ajouter une ligne dans php.ini
	update_php_ini() {
	    local param=$1
	    local value=$2
	    # Remplacer la ligne si elle existe (comment√©e ou non)
	    sed -i "s|^ *;*\($param\)=.*|\1=$value|" "$PHP_INI_FILE"
	    # Ajouter la ligne si elle n'existe pas
	    grep -q "^$param=" "$PHP_INI_FILE" || echo "$param=$value" >> "$PHP_INI_FILE"
	}
	# Mettre √† jour les param√®tres
	update_php_ini "opcache.enable" "1"
	update_php_ini "opcache.enable_cli" "1"
	update_php_ini "opcache.memory_consumption" "128"
	update_php_ini "opcache.interned_strings_buffer" "8"
	update_php_ini "opcache.max_accelerated_files" "10000"
	update_php_ini "opcache.revalidate_freq" "1"
	update_php_ini "opcache.save_comments" "1"
	log_action "Le fichier php.ini a √©t√© mis √† jour avec les nouveaux param√®tres."
	echo "Le fichier php.ini a √©t√© mis √† jour avec les nouveaux param√®tres."
	sudo systemctl restart php8.4-fpm.service
	log_action "fpmPHP Install√© ‚úÖÔ∏è\n"
	echo "fpmPHP Install√© ‚úÖÔ∏è\n"
}

php_install() {
	PHP_INI_FILES=("/etc/php/8.4/apache2/php.ini" "/etc/php/8.4/cli/php.ini")
	# Fonction pour remplacer ou ajouter une ligne dans php.ini
	update_php_ini() {
	    local file=$1
	    local param=$2
	    local value=$3
	    # Remplacer la ligne si elle existe (comment√©e ou non)
	    sed -i "s|^ *;*\($param\)=.*|\1=$value|" "$file"
	    # Ajouter la ligne si elle n'existe pas
	    grep -q "^$param=" "$file" || echo "$param=$value" >> "$file"
	}
	# Mettre √† jour les param√®tres dans chaque fichier
	for PHP_INI_FILE in "${PHP_INI_FILES[@]}"; do
	    update_php_ini "$PHP_INI_FILE" "opcache.memory_consumption" "256"
	    update_php_ini "$PHP_INI_FILE" "opcache.interned_strings_buffer" "32"
	done
	log_action "Les fichiers php.ini ont √©t√© mis √† jour avec les nouveaux param√®tres."
	echo "Les fichiers php.ini ont √©t√© mis √† jour avec les nouveaux param√®tres."
	sudo a2ensite renaud
	sudo a2enmod ssl
	sudo a2ensite default-ssl
	sudo a2enmod headers
	sudo a2enmod env
	sudo a2enmod dir
	sudo a2enmod mime
	sudo a2enmod rewrite
	sudo a2enmod setenvif
	sudo a2enmod proxy_fcgi
	sudo a2enconf php8.4-fpm
	sudo a2enmod evasive
	sudo chown -R "$USERNAME":www-data /var/www/html/

	sudo systemctl restart apache2
	log_action "Service apache2 sont redemarr√©s ‚úÖÔ∏è\n"
	echo "Service apache2 sont redemarr√©s ‚úÖÔ∏è\n"
	log_action "PHP Install√© ‚úÖÔ∏è\n"
	echo "PHP Install√© ‚úÖÔ∏è\n"
}

ufw_install() {
	# Activer le pare-feu
	sudo ufw allow 4446/tcp
	sudo ufw allow 80,443/tcp
	sudo ufw allow out 587/tcp
	sudo ufw enable
	log_action "UFW Install√© ‚úÖÔ∏è\n"
	echo "UFW Install√© ‚úÖÔ∏è\n"
}

sendmail_install() {
	sudo chmod 644 /etc/ssmtp/ssmtp.conf
	sudo chown root:mail /usr/sbin/ssmtp /etc/ssmtp{,/{ssmtp.conf,revaliases}}
	sudo chmod 2711 /usr/sbin/ssmtp
	sudo chmod o-rwx /etc/ssmtp /etc/ssmtp/ssmtp.conf; # 0750, 0640
	sudo dpkg-statoverride --add root mail 2711 /usr/sbin/ssmtp
	sudo dpkg-statoverride --add root mail 0750 /etc/ssmtp
	sudo dpkg-statoverride --add root mail 0640 /etc/ssmtp/ssmtp.conf
	sudo dpkg-statoverride --add root mail 0644 /etc/ssmtp/revaliases
	log_action "SendMail Install√© ‚úÖÔ∏è\n"
	echo "SendMail Install√© ‚úÖÔ∏è\n"
}

fail2ban_install() {
	fail2ban-regex /var/log/apache2/phpmyadmin-access.log /etc/fail2ban/filter.d/phpmyadmin.conf
	sudo systemctl restart fail2ban
	log_action "Fail2Ban Install√© ‚úÖÔ∏è\n"
	echo "Fail2Ban Install√© ‚úÖÔ∏è\n"
}

portsentry_install() {
	sudo service portsentry restart
	log_action "Portsentry Install√© ‚úÖÔ∏è\n"
	echo "Portsentry Install√© ‚úÖÔ∏è\n"
}

rkhunter_install() {
	sudo rkhunter --update
	sudo rkhunter --propupdate
	log_action "RKHunter Install√© ‚úÖÔ∏è\n"
	echo "RKHunter Install√© ‚úÖÔ∏è\n"
}

logwatch_install() {
	sudo mkdir /var/cache/logwatch
	log_action "Logwatch Install√© ‚úÖÔ∏è\n"
	echo "Logwatch Install√© ‚úÖÔ∏è\n"
}

nextcloud_install() {
	cd /home/"$USERNAME"
	wget https://download.nextcloud.com/server/releases/latest.zip
	wget https://download.nextcloud.com/server/releases/latest.zip.sha256
	# V√©rifier l'int√©grit√© du fichier t√©l√©charg√©
	if sha256sum -c latest.zip.sha256 --quiet; then
		log_action "V√©rification de l'int√©grit√© r√©ussie ‚úÖÔ∏è"
		echo "V√©rification de l'int√©grit√© r√©ussie ‚úÖÔ∏è"
	else
		log_action "Erreur de v√©rification du fichier. Le t√©l√©chargement ou le fichier est corrompu ‚ùå"
		echo "Erreur de v√©rification du fichier. Le t√©l√©chargement ou le fichier est corrompu ‚ùå"
		exit 1
	fi
	unzip latest.zip
	sudo cp -rv latest /var/www/html/
	mv latest nextcloud
	sudo chown www-data:www-data /var/www/html/nextcloud/ -Rv
	tar -xvzf "$BACKUP_ARCHIVE" -C / "home/"$USERNAME"/datanextcloud" "var/www/html/nextcloud/config/config.php"
	sudo chown www-data:www-data /home/"$USERNAME"/datanextcloud
	sudo chown www-data:www-data var/www/html/nextcloud/config/config.php
	log_action "Nextcloud Install√© ‚úÖÔ∏è\n"
	echo "Nextcloud Install√© ‚úÖÔ∏è\n"
}

certbot_install() {
	cd /home/"$USERNAME" && wget https://dl.eff.org/certbot-auto
	sudo chmod a+x certbot-auto
	sudo ./certbot-auto
	sudo certbot renew --rsa-key-size 4096 --force-renewal
	log_action "Certbot Install√© ‚úÖÔ∏è\n"
	echo "Certbot Install√© ‚úÖÔ∏è\n"
}

clamav_install() {
	sudo freshclam
	sudo systemctl start clamav-daemon && sudo systemctl enable clamav-daemon
	log_action "ClamAV Install√© ‚úÖÔ∏è\n"
	echo "ClamAV Install√© ‚úÖÔ∏è\n"
}

automysqlbackup_install() {
	mkdir /home/"$USERNAME"/automysqlbackup
	sudo cp /media/"$USERNAME"/$USB_NAME/automysqlbackup/ /home/"$USERNAME"/automysqlbackup/
	log_action "AutoMySQLBackup Install√© ‚úÖÔ∏è\n"
	echo "AutoMySQLBackup Install√© ‚úÖÔ∏è\n"
}

matomo_install() {
	wget https://builds.matomo.org/matomo.zip && unzip matomo.zip -d /var/www/html/renaud
	git clone --recursive https://github.com/maxmind/libmaxminddb
	cd libmaxminddb && ./bootstrap
	wget https://github.com/P3TERX/GeoLite.mmdb/raw/download/GeoLite2-City.mmdb
	sudo mv GeoLite2-City.mmdb /var/www/html/renaud/matomo/misc/
	log_action "Matomo Install√© ‚úÖÔ∏è\n"
	echo "Matomo Install√© ‚úÖÔ∏è\n"
}

phpsysinfo_install() {
	# D√©finition des variables
	INSTALL_DIR="/var/www/html/renaud/phpsysinfo"
	TMP_DIR="/tmp/phpsysinfo_install"
	ARCHIVE_NAME="phpsysinfo.tar.gz"
	# Cr√©ation du r√©pertoire temporaire
	mkdir -p "$TMP_DIR"
	cd "$TMP_DIR"
	# R√©cup√©ration du lien de t√©l√©chargement de la derni√®re version
	TARBALL_URL=$(curl -s https://api.github.com/repos/phpsysinfo/phpsysinfo/releases/latest | grep '"tarball_url"' | cut -d '"' -f 4)
	# V√©rification si l'URL est bien r√©cup√©r√©e
	if [[ -z "$TARBALL_URL" ]]; then
		log_action "Erreur : Impossible de r√©cup√©rer le lien de t√©l√©chargement."
	    echo "Erreur : Impossible de r√©cup√©rer le lien de t√©l√©chargement."
	    exit 1
	fi
	# T√©l√©chargement de l'archive
	log_action "T√©l√©chargement de phpsysinfo..."
	echo "T√©l√©chargement de phpsysinfo..."
	wget -q "$TARBALL_URL" -O "$ARCHIVE_NAME"
	# Suppression de l'ancienne installation si elle existe
	if [[ -d "$INSTALL_DIR" ]]; then
		log_action "Suppression de l'ancienne installation..."
	    echo "Suppression de l'ancienne installation..."
	    rm -rf "$INSTALL_DIR"
	fi
	# Extraction de l'archive
	log_action "Extraction de l'archive..."
	echo "Extraction de l'archive..."
	tar -xzf "$ARCHIVE_NAME"
	# Trouver le dossier extrait (qui a un nom dynamique)
	EXTRACTED_DIR=$(ls -d phpsysinfo-*/ 2>/dev/null | head -n 1)
	# V√©rification si l'extraction s'est bien d√©roul√©e
	if [[ -z "$EXTRACTED_DIR" ]]; then
		log_action "Erreur : Impossible de trouver le dossier extrait."
	    echo "Erreur : Impossible de trouver le dossier extrait."
	    exit 1
	fi
	# D√©placement vers le r√©pertoire d'installation
	mv "$EXTRACTED_DIR" "$INSTALL_DIR"
	# Nettoyage des fichiers temporaires
	rm -rf "$TMP_DIR"
	# Attribution des permissions correctes
	log_action "Configuration des permissions..."
	echo "Configuration des permissions..."
	chown -R www-data:www-data "$INSTALL_DIR"
	chmod -R 755 "$INSTALL_DIR"
	log_action "PHPSysInfo install√© ‚úÖÔ∏è\n"
	echo "PHPSysInfo install√© ‚úÖÔ∏è\n"
}

rpiclone_install() {
	cd /home/"$USERNAME" && git clone https://github.com/billw2/rpi-clone.git
	cd rpi-clone
	sudo cp rpi-clone rpi-clone-setup /usr/local/sbin
	log_action "RPI Clone install√© ‚úÖÔ∏è\n"
	echo "RPI Clone install√© ‚úÖÔ∏è\n"
}

logianalyzer_install() {
	cd /home/"$USERNAME" && git clone https://github.com/renaudgweb/LogIAnalyzer.git
	cd LogIAnalyzer
	pip install -r requirements.txt
	read -p "Entrez les chemins des fichiers logs (s√©par√©s par des virgules) : " log_files
	read -p "Entrez l'adresse email de l'exp√©diteur : " email_sender
	read -p "Entrez l'adresse email du destinataire : " email_receiver
	read -p "Entrez le serveur SMTP : " smtp_server
	cat > "config.ini" <<EOL
[Settings]
log_files = $log_files
email_sender = $email_sender
email_receiver = $email_receiver
smtp_server = $smtp_server
smtp_port = 587
log_check_interval = 300
ai_temperature = 0.5
ai_max_tokens = 4096
daily_report_file = /var/log/log_analyzer_daily_report.txt
EOL
	read -p "Entrez la cl√© API IA : " ai_api_key
	read -p "Entrez le mot de passe SMTP : " smtp_password
	touch .env
	echo "AI_API_KEY=$ai_api_key" > .env
	echo "SMTP_PASSWORD=$smtp_password" > .env
	sudo chmod 600 .env
	sudo touch /etc/systemd/system/logianalyzer.service
	sudo tee /etc/systemd/system/logianalyzer.service > /dev/null <<EOL
[Unit]
Description=Surveillance des logs avec IA
After=network.target

[Service]
User=root
ExecStart=/usr/bin/python3 /home/"$USERNAME"/LogIAnalyzer/logianalyzer.py
Restart=always

[Install]
WantedBy=multi-user.target
EOL
	sudo systemctl daemon-reload
	sudo systemctl enable logianalyzer
	sudo systemctl start logianalyzer
	log_action "LogIAnalyzer install√© ‚úÖÔ∏è\n"
	echo "LogIAnalyzer install√© ‚úÖÔ∏è\n"
}

crontab_install() {
	# Obtient le contenu du crontab de l'utilisateur courant s'il existe, sinon cr√©e un fichier vide
	sudo -u "$USERNAME" crontab -l > crontab_temp 2>/dev/null || touch crontab_temp
	{
		echo ""
		echo "SHELL=/bin/bash"

		echo "# Reboot Notification via Nextcloud Talk"
		echo "@reboot /home/"$USERNAME"/Documents/nextcloudBot/./reboot.sh"

		echo "# CPU high usage Notification (every 5min)"
		echo "*/5 * * * * /home/"$USERNAME"/Documents/nextcloudBot/./cpu.sh"

		echo "# RAM Memory high usage Notification (every 5min)"
		echo "*/5 * * * * /home/"$USERNAME"/Documents/nextcloudBot/./free.sh"

		echo "# Disk space high usage Notification"
		echo "@daily /home/"$USERNAME"/Documents/nextcloudBot/./disk.sh"

		echo "# Temperature high usage Notification (every 5min)"
		echo "*/5 * * * * /home/"$USERNAME"/Documents/nextcloudBot/./temp.sh"

		echo "# Weather NC Talk Bot Notification (All days at 08:35am)"
		echo "35 8 * * * /home/"$USERNAME"/Documents/nextcloudBot/./weather.sh"

		echo "# Random ISS, ChuckNorris, Weather Notification (all Saturday @ random time of 2h after 18h)"
		echo "0 18 * * 6 sleep \$(( RANDOM \% 7200 )); /home/"$USERNAME"/Documents/nextcloudBot/./random.sh"
	} >> crontab_temp
	# Installe la nouvelle crontab pour l'utilisateur actuel
	if sudo -u "$USERNAME" crontab crontab_temp; then
		rm crontab_temp
		log_action "Cron is installed successfully ‚úîÔ∏è\n"
		echo "Cron is installed successfully ‚úîÔ∏è\n"
	else
		log_action "Error during cron installation ‚ùå"
		echo "Error during cron installation ‚ùå"
		rm crontab_temp
		exit 1
	fi

	read -p "Entrez l'adresse email du destinataire de log RPI Clone : " email_receiver
  	# sudo crontab
	# Obtient le contenu du crontab de root s'il existe, sinon cr√©e un fichier vide
	sudo crontab -u root -l > crontab_temp 2>/dev/null || touch crontab_temp
	# Ajoute les nouvelles lignes √† la fin du fichier temporaire
	{
		echo "# script de sauvegarde du lundi au dimanche √† 05h00"
		echo "00 05 * * 1-7 /home/"$USERNAME"/exeBackup.sh"

		echo "# script de sauvegarde de base de donn√©es MariaDB quotidien"
		echo "00 04 * * 1-7 /usr/sbin/automysqlbackup"

		echo "# script de renouvelement certificat SSL 1 fois par mois"
		echo "@monthly certbot renew --rsa-key-size 4096 --force-renewal"

		echo "# Script affichage Temperature CPU sur TM1637 au redemarrage"
		echo "@reboot python3 /home/"$USERNAME"/Documents/tm1637/cpuTemp.py"

		echo "# Disable WiFi"
		echo "@reboot ifconfig wlan0 down"

		echo "# Start Wondershaper"
		echo "@reboot wondershaper -a eth0 -d 4096 -u 8192"

		echo "# Maj paquets apt tous les jours √† 3h du matin"
		echo "0 3 * * * /usr/bin/apt update && /usr/bin/apt upgrade -y"

		echo "# RPI Clone tous les lundis √† 02h00 du matin"
		echo "0 2 * * 1 echo \"yes\" | rpi-clone sdb -v > /var/log/rpi-clone.log 2>&1 && mailx -s \"RPi Clone Log\" "$email_receiver" < /var/log/rpi-clone.log"

		echo "# Nextcloud crontab"
		echo "*/5 * * * * su -s /bin/sh -c \"php -f /var/www/html/nextcloud/cron.php --define apc.enable_cli=1\" www-data > /home/"$USERNAME"/CRON.txt 2>&1"
	} >> crontab_temp
	# Installe la nouvelle crontab pour root
	if sudo crontab -u root crontab_temp; then
		rm crontab_temp
		log_action "Cron is installed successfully ‚úîÔ∏è\n"
		echo "Cron is installed successfully ‚úîÔ∏è\n"
	else
		log_action "Error during cron installation ‚ùå"
		echo "Error during cron installation ‚ùå"
		rm crontab_temp
		exit 1
	fi
}

main_install() {
	user_install
	usb_install
	iptable_install
	apt_install
	wiringpi_install
	a2_install
	wondershaper_install
	mysql_install
	phpmyadmin_install
	modsecurity_install
	modsecurity_crs_install
	fpm_php_install
	php_install
	ufw_install
	sendmail_install
	fail2ban_install
	portsentry_install
	rkhunter_install
	logwatch_install
	nextcloud_install
	certbot_install
	clamav_install
	automysqlbackup_install
	matomo_install
	phpsysinfo_install
	rpiclone_install
	logianalyzer_install
	crontab_install

	sudo apt update && sudo apt -y autoremove && sudo apt -y clean
	log_action "Les mises √† jour sont install√©s ‚úÖÔ∏è\n"
	echo "Les mises √† jour sont install√©s ‚úÖÔ∏è\n"
}

prompt_choice() {
    local prompt=$1
    local choice
    while true; do
        echo "$prompt"
        read -r choice
        case $choice in
            [Yy]* ) return 0;;
            [Nn]* ) echo "Bye üëã"; exit;;
            * ) echo "‚õîÔ∏èEntrez Y ou N";;
        esac
    done
}

# Demande initiale pour commencer l'installation
prompt_choice "Voulez-vous continuer ? [Y]es‚úîÔ∏è, ou [N]o‚ùå : " && main_install

# Message rappelant les t√¢ches manuelles avec couleur
printf "\e[31m‚ö†Ô∏è Rappel ‚ö†Ô∏è\e[0m\n  \e[33m- Restaurer la base de donn√©es\n  - Changer l'ID du bot Nextcloud\e[0m\n"

while true; do
    printf "\e[32mInstallation termin√©e üöÄ [R]ebooter ou [Q]uitter ?\e[0m\n"
    read -r REPLY
    case $REPLY in
        [Rr]* ) sudo reboot; break;;
        [Qq]* ) echo "Bye üëã"; exit;;
        * ) echo "‚õîÔ∏èEntrez R ou Q";;
    esac
done
